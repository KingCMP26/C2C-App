import sqlite3

def create_db():
    conn = sqlite3.connect('bank.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS accounts (
            account_id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            balance REAL DEFAULT 0.0
        )
    ''')
    conn.commit()
    conn.close()
def create_account(name, initial_deposit=0.0):
    conn = sqlite3.connect('bank.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO accounts (name, balance) VALUES (?, ?)', (name, initial_deposit))
    conn.commit()
    conn.close()

def check_balance(account_id):
    conn = sqlite3.connect('bank.db')
    cursor = conn.cursor()
    cursor.execute('SELECT balance FROM accounts WHERE account_id = ?', (account_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

def deposit(account_id, amount):
    conn = sqlite3.connect('bank.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE accounts SET balance = balance + ? WHERE account_id = ?', (amount, account_id))
    conn.commit()
    conn.close()

def withdraw(account_id, amount):
    conn = sqlite3.connect('bank.db')
    cursor = conn.cursor()
    cursor.execute('SELECT balance FROM accounts WHERE account_id = ?', (account_id,))
    balance = cursor.fetchone()
    if balance and balance[0] >= amount:
        cursor.execute('UPDATE accounts SET balance = balance - ? WHERE account_id = ?', (amount, account_id))
        conn.commit()
        result = True
    else:
        result = False
    conn.close()
    return result

def modify_account(account_id, new_name):
    conn = sqlite3.connect('bank.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE accounts SET name = ? WHERE account_id = ?', (new_name, account_id))
    conn.commit()
    conn.close()

def delete_account(account_id):
    conn = sqlite3.connect('bank.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM accounts WHERE account_id = ?', (account_id,))
    conn.commit()
    conn.close()
def menu():
    print("\n=== Welcome to CLI Bank App ===")
    print("1. Create Account")
    print("2. Check Balance")
    print("3. Deposit")
    print("4. Withdraw")
    print("5. Modify Account")
    print("6. Delete Account")
    print("7. Exit")

def main():
    create_db()
    while True:
        menu()
        choice = input("Select an option (1-7): ")

        if choice == '1':
            name = input("Enter your name: ")
            deposit = float(input("Initial deposit: "))
            create_account(name, deposit)
            print("Account created successfully!")

        elif choice == '2':
            acc_id = int(input("Enter account ID: "))
            balance = check_balance(acc_id)
            if balance is not None:
                print(f"Balance: ${balance:.2f}")
            else:
                print("Account not found.")

        elif choice == '3':
            acc_id = int(input("Enter account ID: "))
            amount = float(input("Amount to deposit: "))
            deposit(acc_id, amount)
            print("Deposit successful.")

        elif choice == '4':
            acc_id = int(input("Enter account ID: "))
            amount = float(input("Amount to withdraw: "))
            if withdraw(acc_id, amount):
                print("Withdrawal successful.")
            else:
                print("Insufficient funds or invalid account.")

        elif choice == '5':
            acc_id = int(input("Enter account ID: "))
            new_name = input("Enter new name: ")
            modify_account(acc_id, new_name)
            print("Account modified successfully.")

        elif choice == '6':
            acc_id = int(input("Enter account ID: "))
            delete_account(acc_id)
            print("Account deleted.")

        elif choice == '7':
            print("Thanks for using CLI Bank App. Goodbye!")
            break

        else:
            print("Invalid option. Please try again.")

if __name__ == "__main__":
    main()